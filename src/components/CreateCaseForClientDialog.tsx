import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import Icon from '@/components/ui/icon';
import { toast } from 'sonner';
import CreateClientDialog from './CreateClientDialog';

interface CreateCaseForClientDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  clients: any[];
  onSuccess: () => void;
  onClientCreated?: () => void;
}

const API_URL = 'https://functions.poehali.dev/051ee883-7010-44a8-a46c-b5021e841de7';

const CreateCaseForClientDialog = ({ open, onOpenChange, clients, onSuccess, onClientCreated }: CreateCaseForClientDialogProps) => {
  const [loading, setLoading] = useState(false);
  const [createClientOpen, setCreateClientOpen] = useState(false);
  const [formData, setFormData] = useState({
    client_id: '',
    title: '',
    description: '',
    category: '',
    priority: 'medium',
    price: 0
  });

  const handleNewClient = (newClient: any) => {
    console.log('üÜï New client created:', newClient);
    setFormData({ ...formData, client_id: newClient.id });
    toast.success('–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
    if (onClientCreated) {
      console.log('üîÑ Reloading clients list...');
      onClientCreated();
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.client_id || !formData.title) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞');
      return;
    }

    setLoading(true);

    try {
      const token = localStorage.getItem('auth_token');
      
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Auth-Token': token || ''
        },
        body: JSON.stringify({
          action: 'create_case',
          ...formData
        })
      });

      const data = await response.json();

      if (response.ok || response.status === 201) {
        toast.success('–î–µ–ª–æ —Å–æ–∑–¥–∞–Ω–æ! –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ WhatsApp');
        setFormData({
          client_id: '',
          title: '',
          description: '',
          category: '',
          priority: 'medium',
          price: 0
        });
        onSuccess();
        onOpenChange(false);
      } else {
        toast.error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ª–∞');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>–°–æ–∑–¥–∞—Ç—å –¥–µ–ª–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞</DialogTitle>
          <DialogDescription>
            –ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ WhatsApp
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="client">–ö–ª–∏–µ–Ω—Ç *</Label>
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={() => setCreateClientOpen(true)}
                disabled={loading}
              >
                <Icon name="UserPlus" className="h-4 w-4 mr-1" />
                –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
              </Button>
            </div>
            <Select value={formData.client_id} onValueChange={(value) => setFormData({ ...formData, client_id: value })}>
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞" />
              </SelectTrigger>
              <SelectContent>
                {clients.map((client) => (
                  <SelectItem key={client.id} value={client.id}>
                    {client.name} {client.phone && `(${client.phone})`}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞ *</Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                placeholder="–ò—Å–∫ –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏"
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
              <Select value={formData.category} onValueChange={(value) => setFormData({ ...formData, category: value })}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="civil">–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ</SelectItem>
                  <SelectItem value="business">–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ</SelectItem>
                  <SelectItem value="family">–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ</SelectItem>
                  <SelectItem value="criminal">–£–≥–æ–ª–æ–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞</SelectItem>
                  <SelectItem value="real-estate">–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</SelectItem>
                  <SelectItem value="other">–î—Ä—É–≥–æ–µ</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
            <Textarea
              id="description"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞..."
              rows={4}
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</Label>
              <Select value={formData.priority} onValueChange={(value) => setFormData({ ...formData, priority: value })}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="low">–ù–∏–∑–∫–∏–π</SelectItem>
                  <SelectItem value="medium">–°—Ä–µ–¥–Ω–∏–π</SelectItem>
                  <SelectItem value="high">–í—ã—Å–æ–∫–∏–π</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="price">–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)</Label>
              <Input
                id="price"
                type="number"
                min="0"
                value={formData.price}
                onChange={(e) => setFormData({ ...formData, price: parseFloat(e.target.value) || 0 })}
              />
            </div>
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)} disabled={loading}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button type="submit" disabled={loading}>
              {loading ? (
                <>
                  <Icon name="Loader2" className="h-4 w-4 mr-2 animate-spin" />
                  –°–æ–∑–¥–∞–Ω–∏–µ...
                </>
              ) : (
                <>
                  <Icon name="Plus" className="h-4 w-4 mr-2" />
                  –°–æ–∑–¥–∞—Ç—å –¥–µ–ª–æ
                </>
              )}
            </Button>
          </div>
        </form>
      </DialogContent>

      <CreateClientDialog
        open={createClientOpen}
        onOpenChange={setCreateClientOpen}
        onSuccess={handleNewClient}
      />
    </Dialog>
  );
};

export default CreateCaseForClientDialog;