import { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import Icon from "@/components/ui/icon";
import { useModal } from "@/hooks/useModal";
import { toast } from "sonner";

const PopupModal = () => {
  const { isOpen, closeModal, openModal } = useModal();
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    question: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.name || !formData.phone) {
      toast.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
      return;
    }

    setIsSubmitting(true);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Green API
      const message = `üéÅ –ó–∞—è–≤–∫–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\nüë§ –ò–º—è: ${formData.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}\n‚ùì –í–æ–ø—Ä–æ—Å: ${formData.question || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}`;

      const response = await fetch(
        `https://1103.api.green-api.com/waInstance1103279953/sendMessage/c80e4b7d4aa14f7c9f0b86e05730e35f1200768ef5b046209e`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chatId: "79994523500@c.us",
            message: message,
          }),
        },
      );

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏");
      }

      toast.success("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è");
      setFormData({ name: "", phone: "", question: "" });
      closeModal();
    } catch (error) {
      toast.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  useEffect(() => {
    const timer = setTimeout(() => {
      openModal();
    }, 60000); // 30 seconds

    return () => clearTimeout(timer);
  }, [openModal]);

  return (
    <Dialog open={isOpen} onOpenChange={closeModal}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Icon name="Scale" className="h-6 w-6 text-primary" />
            <span>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</span>
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          <div className="text-center space-y-3">
            <div className="w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto">
              <Icon name="Gift" className="h-8 w-8 text-primary" />
            </div>
            <h3 className="text-lg font-semibold">
              –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —é—Ä–∏—Å—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
            </h3>
            <p className="text-muted-foreground text-sm">
              –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É
              –≤–æ–ø—Ä–æ—Å—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
            </p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Input
                placeholder="–í–∞—à–µ –∏–º—è *"
                value={formData.name}
                onChange={(e) => handleInputChange("name", e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Input
                placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *"
                type="tel"
                value={formData.phone}
                onChange={(e) => handleInputChange("phone", e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Input
                placeholder="–ö—Ä–∞—Ç–∫–æ –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ"
                value={formData.question}
                onChange={(e) => handleInputChange("question", e.target.value)}
              />
            </div>
          </form>

          <div className="space-y-4">
            <Button
              className="w-full bg-primary hover:bg-primary/90"
              size="lg"
              onClick={handleSubmit}
              disabled={isSubmitting}
            >
              <Icon name="Phone" className="h-5 w-5 mr-2" />
              {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º..." : "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"}
            </Button>
          </div>

          <div className="text-center text-xs text-muted-foreground">
            –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å{" "}
            <a
              href="/privacy"
              target="_blank"
              className="text-primary hover:underline"
            >
              –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            </a>
          </div>

          <div className="flex items-center justify-center space-x-4 text-sm text-muted-foreground">
            <div className="flex items-center space-x-1">
              <Icon name="Clock" className="h-4 w-4" />
              <span>–ë—ã—Å—Ç—Ä–æ</span>
            </div>
            <div className="flex items-center space-x-1">
              <Icon name="Shield" className="h-4 w-4" />
              <span>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ</span>
            </div>
            <div className="flex items-center space-x-1">
              <Icon name="Gift" className="h-4 w-4" />
              <span>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default PopupModal;
